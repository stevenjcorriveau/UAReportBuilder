/*
 * Copyright (C) 2015 Steven Corriveau
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package edu.ct.uareportbuilder;

import com.lowagie.text.BadElementException;
import com.lowagie.text.Document;
import com.lowagie.text.DocumentException;
import com.lowagie.text.Element;
import com.lowagie.text.ExceptionConverter;
import com.lowagie.text.Font;
import com.lowagie.text.HeaderFooter;
import com.lowagie.text.Image;
import com.lowagie.text.PageSize;
import com.lowagie.text.Paragraph;
import com.lowagie.text.Phrase;
import com.lowagie.text.Rectangle;
import com.lowagie.text.pdf.PdfPCell;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfPageEventHelper;
import com.lowagie.text.pdf.PdfWriter;
import edu.ct.uareportbuilder.charts.BrowserChart;
import edu.ct.uareportbuilder.charts.DeviceChart;
import edu.ct.uareportbuilder.charts.OSChart;
import edu.ct.uareportbuilder.charts.WindowsBrowserChart;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JFileChooser;

/**
 *
 * @author Steve
 */
public class UAReportBuilderFrame extends javax.swing.JFrame {

  private File logFile;
  private File garbageFile = new File("garbage.txt");
  private UserAgentParser uap = new UserAgentParser();
  
  private Document userAgentPDF;
  private Font titleFont = new Font(Font.HELVETICA, 14, Font.BOLD, Color.BLACK);
  private Font subtitleFont = new Font(Font.HELVETICA, 12, Font.ITALIC, Color.BLACK);
  private Font bodyHeadingFont = new Font(Font.HELVETICA, 12, Font.BOLD, Color.BLACK);
  private Font detailHeadingFont = new Font(Font.HELVETICA, 10, Font.BOLD, Color.BLACK);
  private Font detailFont = new Font(Font.HELVETICA, 10, Font.NORMAL, Color.BLACK);
  
  private String reportMonth = "";
  private String reportYear = "";
  private String reportDate = "";
  
  private Paragraph blankLine = new Paragraph(" ");
  private Paragraph title;
  private Paragraph subTitle;
  
  private float[] columnWidths = {20f, 5f};
  
  private DecimalFormat percentFormat = new DecimalFormat("##0.00%");
  
  /**
   * Creates new form UAReportBuilderFrame
   */
  public UAReportBuilderFrame() {
    initComponents();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    fileChooser = new javax.swing.JFileChooser();
    uaReportBuilderMenuBar = new javax.swing.JMenuBar();
    fileMenu = new javax.swing.JMenu();
    fileOpenMenuItem = new javax.swing.JMenuItem();
    editMenu = new javax.swing.JMenu();
    parseMenu = new javax.swing.JMenu();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

    fileMenu.setText("File");

    fileOpenMenuItem.setText("Open");
    fileOpenMenuItem.setToolTipText("Open UA log file");
    fileOpenMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        fileOpenMenuItemActionPerformed(evt);
      }
    });
    fileMenu.add(fileOpenMenuItem);

    uaReportBuilderMenuBar.add(fileMenu);

    editMenu.setText("Edit");
    uaReportBuilderMenuBar.add(editMenu);

    parseMenu.setText("Parse");
    parseMenu.addMenuListener(new javax.swing.event.MenuListener() {
      public void menuCanceled(javax.swing.event.MenuEvent evt) {
      }
      public void menuDeselected(javax.swing.event.MenuEvent evt) {
      }
      public void menuSelected(javax.swing.event.MenuEvent evt) {
        parseMenuMenuSelected(evt);
      }
    });
    uaReportBuilderMenuBar.add(parseMenu);

    setJMenuBar(uaReportBuilderMenuBar);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 602, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 419, Short.MAX_VALUE)
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void fileOpenMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileOpenMenuItemActionPerformed
    int returnVal = fileChooser.showOpenDialog(this);
    
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      logFile = fileChooser.getSelectedFile();
      
      String[] fileParts = logFile.getName().split("\\.");
      reportDate = fileParts[fileParts.length - 1];
      
      reportYear = reportDate.substring(0,4);
      
      switch (reportDate.substring(4)) {
        case "01":
          reportMonth = "January";
          break;
        case "02":
          reportMonth = "February";
          break;
        case "03":
          reportMonth = "March";
          break;
        case "04":
          reportMonth = "April";
          break;
        case "05":
          reportMonth = "May";
          break;
        case "06":
          reportMonth = "June";
          break;
        case "07":
          reportMonth = "July";
          break;
        case "08":
          reportMonth = "August";
          break;
        case "09":
          reportMonth = "September";
          break;
        case "10":
          reportMonth = "October";
          break;
        case "11":
          reportMonth = "November";
          break;
        case "12":
          reportMonth = "December";
          break;
        default:
          reportMonth = "Error";
          break;
      }
      
      //TODO:  If month reports Error, prompt user to enter report date
    }
  }//GEN-LAST:event_fileOpenMenuItemActionPerformed

  private void parseMenuMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_parseMenuMenuSelected
    String date;
    String time;
    String id;
    String ua;
    String browser;
    String version;
    String os;
    
    try {
      //System.out.println("Using file: " + logFile.getAbsolutePath());
      FileReader reader = new FileReader(logFile);
      BufferedWriter garbage = new BufferedWriter(new FileWriter(garbageFile, true));
      
      BufferedReader buffered = new BufferedReader(reader);
      String line;
      
      try {
        while ((line = buffered.readLine()) != null) {
          
          Pattern pattern = Pattern.compile("(.{8})\\s(.{8})\\s+(\\S+)\\s+(.+)");
          Matcher match = pattern.matcher(line);
          
          if (match.find()) {
            date = match.group(1);
            time = match.group(2);
            id = match.group(3);
            ua = match.group(4);
            
            uap.parse(ua);
            browser = uap.getBrowserName();
            version = uap.getBrowserVersion();
            os = uap.getOperatingSystem();
          }
          else {
            // If input does not begin with a date we assume that this line is garbage.
            garbage.write(line);
            garbage.newLine();
    
            //System.err.println("Did not find any matches");
          }
          
        }
      } catch (IOException ex) {
        ex.printStackTrace();
        //Logger.getLogger(UAReportBuilderFrame.class.getName()).log(Level.SEVERE, null, ex);
      }
      
      try {
        buffered.close();
        garbage.close();
        uap.closeFiles();
      } catch (IOException ex) {
        ex.printStackTrace();
        //Logger.getLogger(UAReportBuilderFrame.class.getName()).log(Level.SEVERE, null, ex);
      }
      
      createPDF();
    } 
    catch (FileNotFoundException ex) {
      ex.printStackTrace();
      //Logger.getLogger(UAReportBuilderFrame.class.getName()).log(Level.SEVERE, null, ex);
    }
    catch (IOException ioe) {
      ioe.printStackTrace();
    }
  }//GEN-LAST:event_parseMenuMenuSelected
  
  private void createPDF() {
    BrowserStatistics stats = uap.getCurrentStatistics();
    userAgentPDF = new Document(PageSize.LETTER);

    //UAShutdownHook hook = new UAShutdownHook(userAgentPDF);
    //Runtime.getRuntime().addShutdownHook(hook);

    try {
      PdfWriter writer = PdfWriter.getInstance(
        userAgentPDF, 
        new FileOutputStream("user_agent_stats_" + reportDate + ".pdf")
      );
      
      // For page numbering
      HeaderFooter footer = new HeaderFooter(new Phrase("", detailFont), true);
      footer.setBorder(Rectangle.NO_BORDER);
      footer.setAlignment(Element.ALIGN_CENTER);
      userAgentPDF.setFooter(footer);

      writer.setPageEvent(new HeadersAndFooters());
      writer.setStrictImageSequence(true);
      userAgentPDF.setMargins(36f, 36f, 18f, 36f);
      userAgentPDF.open();

      //Paragraph deviceUsage = new Paragraph("Device Usage", subtitleFont);
      //userAgentPDF.add(deviceUsage);

      DeviceChart dc = new DeviceChart(stats);
      Image deviceImage = Image.getInstance("device_percentage_chart.png");
      userAgentPDF.add(deviceImage);

      BrowserChart bc = new BrowserChart(stats);
      Image browserImage = Image.getInstance("browser_percentage_chart.png");
      userAgentPDF.add(browserImage);

      WindowsBrowserChart wbc = new WindowsBrowserChart(stats);
      Image winBrowserImage = Image.getInstance("windows_browser_percentage_chart.png");
      userAgentPDF.add(winBrowserImage);

      OSChart osc = new OSChart(stats);
      Image osImage = Image.getInstance("os_percentage_chart.png");
      userAgentPDF.add(osImage);

      userAgentPDF.add(new Paragraph("Raw Data:", bodyHeadingFont));
      //create table here so that we can right-justify the second column
      PdfPCell blankCell = new PdfPCell(new Phrase(" ", detailFont));
      blankCell.setBorder(Rectangle.NO_BORDER);

      PdfPTable statTable = new PdfPTable(columnWidths);
      statTable.setWidthPercentage(40f);
      //statTable.setKeepTogether(true);
      
      /*
       * Operating Systems
       */
      PdfPCell osCell = new PdfPCell(new Phrase("Operating Systems", detailHeadingFont));
      osCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(osCell);
      statTable.addCell(blankCell);

      PdfPCell winOsCell = new PdfPCell(new Phrase("Windows:", detailFont));
      winOsCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(winOsCell);
      statTable.addCell(blankCell);

      PdfPCell vistaCell = new PdfPCell(new Phrase("    Vista:", detailFont));
      vistaCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(vistaCell);

      PdfPCell vistaStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getWindowsVistaOSCount()), detailFont));
      vistaStatCell.setBorder(Rectangle.NO_BORDER);
      vistaStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(vistaStatCell);

      PdfPCell xpCell = new PdfPCell(new Phrase("    XP:", detailFont));
      xpCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(xpCell);

      PdfPCell xpStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getWindowsXPOSCount()), detailFont));
      xpStatCell.setBorder(Rectangle.NO_BORDER);
      xpStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(xpStatCell);

      PdfPCell win7Cell = new PdfPCell(new Phrase("    Windows 7:", detailFont));
      win7Cell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(win7Cell);

      PdfPCell win7StatCell = new PdfPCell(new Phrase(Integer.toString(stats.getWindows7OSCount()), detailFont));
      win7StatCell.setBorder(Rectangle.NO_BORDER);
      win7StatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(win7StatCell);

      PdfPCell win8Cell = new PdfPCell(new Phrase("    Windows 8:", detailFont));
      win8Cell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(win8Cell);

      PdfPCell win8StatCell = new PdfPCell(new Phrase(Integer.toString(stats.getWindows8OSCount()), detailFont));
      win8StatCell.setBorder(Rectangle.NO_BORDER);
      win8StatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(win8StatCell);

      PdfPCell win10Cell = new PdfPCell(new Phrase("    Windows 10:", detailFont));
      win10Cell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(win10Cell);

      PdfPCell win10StatCell = new PdfPCell(new Phrase(Integer.toString(stats.getWindows10OSCount()), detailFont));
      win10StatCell.setBorder(Rectangle.NO_BORDER);
      win10StatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(win10StatCell);

      PdfPCell winPhone8Cell = new PdfPCell(new Phrase("    Windows Phone 8.0:", detailFont));
      winPhone8Cell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(winPhone8Cell);

      PdfPCell winPhone8StatCell = new PdfPCell(new Phrase(Integer.toString(stats.getWindows80PhoneOSCount()), detailFont));
      winPhone8StatCell.setBorder(Rectangle.NO_BORDER);
      winPhone8StatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(winPhone8StatCell);

      PdfPCell winPhone81Cell = new PdfPCell(new Phrase("    Windows Phone 8.1:", detailFont));
      winPhone81Cell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(winPhone81Cell);

      PdfPCell winPhone81StatCell = new PdfPCell(new Phrase(Integer.toString(stats.getWindows81PhoneOSCount()), detailFont));
      winPhone81StatCell.setBorder(Rectangle.NO_BORDER);
      winPhone81StatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(winPhone81StatCell);

      PdfPCell winPhone10Cell = new PdfPCell(new Phrase("    Windows Phone 10.0:", detailFont));
      winPhone10Cell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(winPhone10Cell);

      PdfPCell winPhone10StatCell = new PdfPCell(new Phrase(Integer.toString(stats.getWindows10PhoneOSCount()), detailFont));
      winPhone10StatCell.setBorder(Rectangle.NO_BORDER);
      winPhone10StatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(winPhone10StatCell);

      PdfPCell winOtherCell = new PdfPCell(new Phrase("    Other Windows:", detailFont));
      winOtherCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(winOtherCell);

      PdfPCell winOtherStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getWindowsOtherOSCount()), detailFont));
      winOtherStatCell.setBorder(Rectangle.NO_BORDER);
      winOtherStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(winOtherStatCell);

      PdfPCell winUnknownCell = new PdfPCell(new Phrase("    Unknown Windows:", detailFont));
      winUnknownCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(winUnknownCell);

      PdfPCell winUnknownStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getWindowsUnknownOSCount()), detailFont));
      winUnknownStatCell.setBorder(Rectangle.NO_BORDER);
      winUnknownStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(winUnknownStatCell);

      PdfPCell winTotalCell = new PdfPCell(new Phrase("    Total Windows:", detailFont));
      winTotalCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(winTotalCell);

      PdfPCell winTotalStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getWindowsOSCount()), detailFont));
      winTotalStatCell.setBorder(Rectangle.NO_BORDER);
      winTotalStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(winTotalStatCell);

      PdfPCell nixOsCell = new PdfPCell(new Phrase("*nix-based:", detailFont));
      nixOsCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(nixOsCell);
      statTable.addCell(blankCell);

      PdfPCell unixCell = new PdfPCell(new Phrase("    Unix:", detailFont));
      unixCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(unixCell);

      PdfPCell unixStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getUnixOSCount()), detailFont));
      unixStatCell.setBorder(Rectangle.NO_BORDER);
      unixStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(unixStatCell);

      PdfPCell LinuxCell = new PdfPCell(new Phrase("    Linux:", detailFont));
      LinuxCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(LinuxCell);

      PdfPCell LinuxStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getLinuxOSCount()), detailFont));
      LinuxStatCell.setBorder(Rectangle.NO_BORDER);
      LinuxStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(LinuxStatCell);

      PdfPCell and2Cell = new PdfPCell(new Phrase("    Anroid 2:", detailFont));
      and2Cell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(and2Cell);

      PdfPCell and2StatCell = new PdfPCell(new Phrase(Integer.toString(stats.getAndroid2OSCount()), detailFont));
      and2StatCell.setBorder(Rectangle.NO_BORDER);
      and2StatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(and2StatCell);

      PdfPCell and3Cell = new PdfPCell(new Phrase("    Android 3:", detailFont));
      and3Cell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(and3Cell);

      PdfPCell and3StatCell = new PdfPCell(new Phrase(Integer.toString(stats.getAndroid3OSCount()), detailFont));
      and3StatCell.setBorder(Rectangle.NO_BORDER);
      and3StatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(and3StatCell);

      PdfPCell and4Cell = new PdfPCell(new Phrase("    Anroid 4:", detailFont));
      and4Cell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(and4Cell);

      PdfPCell and4StatCell = new PdfPCell(new Phrase(Integer.toString(stats.getAndroid4OSCount()), detailFont));
      and4StatCell.setBorder(Rectangle.NO_BORDER);
      and4StatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(and4StatCell);

      PdfPCell and5Cell = new PdfPCell(new Phrase("    Anroid 5:", detailFont));
      and5Cell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(and5Cell);

      PdfPCell and5StatCell = new PdfPCell(new Phrase(Integer.toString(stats.getAndroid5OSCount()), detailFont));
      and5StatCell.setBorder(Rectangle.NO_BORDER);
      and5StatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(and5StatCell);

      PdfPCell andOtherCell = new PdfPCell(new Phrase("    Other Android:", detailFont));
      andOtherCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(andOtherCell);

      PdfPCell andOtherStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getAndroidOtherOSCount()), detailFont));
      andOtherStatCell.setBorder(Rectangle.NO_BORDER);
      andOtherStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(andOtherStatCell);

      PdfPCell andUnknownCell = new PdfPCell(new Phrase("    Unknown Android:", detailFont));
      andUnknownCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(andUnknownCell);

      PdfPCell andUnknownStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getAndroidUnknownOSCount()), detailFont));
      andUnknownStatCell.setBorder(Rectangle.NO_BORDER);
      andUnknownStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(andUnknownStatCell);

      PdfPCell andTotalCell = new PdfPCell(new Phrase("    Total Android:", detailFont));
      andTotalCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(andTotalCell);

      PdfPCell andTotalStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getAndroidTotalOSCount()), detailFont));
      andTotalStatCell.setBorder(Rectangle.NO_BORDER);
      andTotalStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(andTotalStatCell);

      PdfPCell nixTotalCell = new PdfPCell(new Phrase("    Total *nix-based:", detailFont));
      nixTotalCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(nixTotalCell);

      PdfPCell nixTotalStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getNixOSCount()), detailFont));
      nixTotalStatCell.setBorder(Rectangle.NO_BORDER);
      nixTotalStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(nixTotalStatCell);

      PdfPCell otherOsCell = new PdfPCell(new Phrase("Others:", detailFont));
      otherOsCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(otherOsCell);
      statTable.addCell(blankCell);

      PdfPCell chromiumCell = new PdfPCell(new Phrase("    Chromium:", detailFont));
      chromiumCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(chromiumCell);

      PdfPCell chromiumStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getChromiumOSCount()), detailFont));
      chromiumStatCell.setBorder(Rectangle.NO_BORDER);
      chromiumStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(chromiumStatCell);

      PdfPCell iosCell = new PdfPCell(new Phrase("    iOS:", detailFont));
      iosCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(iosCell);

      PdfPCell iosStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getIOSCount()), detailFont));
      iosStatCell.setBorder(Rectangle.NO_BORDER);
      iosStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(iosStatCell);

      PdfPCell macCell = new PdfPCell(new Phrase("    Macintosh:", detailFont));
      macCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(macCell);

      PdfPCell macStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getMacOSCount()), detailFont));
      macStatCell.setBorder(Rectangle.NO_BORDER);
      macStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(macStatCell);

      PdfPCell cyanCell = new PdfPCell(new Phrase("    Cyanogen:", detailFont));
      cyanCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(cyanCell);

      PdfPCell cyanStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getCyanogenOSCount()), detailFont));
      cyanStatCell.setBorder(Rectangle.NO_BORDER);
      cyanStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(cyanStatCell);

      PdfPCell maemoCell = new PdfPCell(new Phrase("    Maemo:", detailFont));
      maemoCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(maemoCell);

      PdfPCell maemoStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getMaemoOSCount()), detailFont));
      maemoStatCell.setBorder(Rectangle.NO_BORDER);
      maemoStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(maemoStatCell);

      PdfPCell otherOSCell = new PdfPCell(new Phrase("    Other:", detailFont));
      otherOSCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(otherOSCell);

      PdfPCell otherOSStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getMiscOSCount()), detailFont));
      otherOSStatCell.setBorder(Rectangle.NO_BORDER);
      otherOSStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(otherOSStatCell);
      
      /*
       * Browsers
       */
      PdfPCell browseCell = new PdfPCell(new Phrase("Browsers", detailHeadingFont));
      browseCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(browseCell);
      statTable.addCell(blankCell);

      PdfPCell webkitCell = new PdfPCell(new Phrase("Webkit:", detailFont));
      webkitCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(webkitCell);
      statTable.addCell(blankCell);

      PdfPCell safariCell = new PdfPCell(new Phrase("    Safari:", detailFont));
      safariCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(safariCell);

      PdfPCell safariStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getSafariCount()), detailFont));
      safariStatCell.setBorder(Rectangle.NO_BORDER);
      safariStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(safariStatCell);

      PdfPCell safariMobileCell = new PdfPCell(new Phrase("    Safari Mobile:", detailFont));
      safariMobileCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(safariMobileCell);

      PdfPCell safariMobileStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getSafariMobileCount()), detailFont));
      safariMobileStatCell.setBorder(Rectangle.NO_BORDER);
      safariMobileStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(safariMobileStatCell);

      PdfPCell kindleCell = new PdfPCell(new Phrase("    Kindle:", detailFont));
      kindleCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(kindleCell);

      PdfPCell kindleStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getKindleCount()), detailFont));
      kindleStatCell.setBorder(Rectangle.NO_BORDER);
      kindleStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(kindleStatCell);

      PdfPCell chromeCell = new PdfPCell(new Phrase("    Chrome:", detailFont));
      chromeCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(chromeCell);

      PdfPCell chromeStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getChromeCount()), detailFont));
      chromeStatCell.setBorder(Rectangle.NO_BORDER);
      chromeStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(chromeStatCell);

      PdfPCell operaCell = new PdfPCell(new Phrase("    Opera:", detailFont));
      operaCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(operaCell);

      PdfPCell operaStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getOperaCount()), detailFont));
      operaStatCell.setBorder(Rectangle.NO_BORDER);
      operaStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(operaStatCell);

      PdfPCell operaMiniCell = new PdfPCell(new Phrase("    Opera Mini:", detailFont));
      operaMiniCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(operaMiniCell);

      PdfPCell operaMiniStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getOperaMiniCount()), detailFont));
      operaMiniStatCell.setBorder(Rectangle.NO_BORDER);
      operaMiniStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(operaMiniStatCell);

      PdfPCell coastCell = new PdfPCell(new Phrase("    Opera Coast:", detailFont));
      coastCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(coastCell);

      PdfPCell coastStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getCoastCount()), detailFont));
      coastStatCell.setBorder(Rectangle.NO_BORDER);
      coastStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(coastStatCell);

      PdfPCell puffinCell = new PdfPCell(new Phrase("    Puffin:", detailFont));
      puffinCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(puffinCell);

      PdfPCell puffinStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getPuffinCount()), detailFont));
      puffinStatCell.setBorder(Rectangle.NO_BORDER);
      puffinStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(puffinStatCell);

      PdfPCell dolphinCell = new PdfPCell(new Phrase("    Dolphin:", detailFont));
      dolphinCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(dolphinCell);

      PdfPCell dolphinStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getDolphinCount()), detailFont));
      dolphinStatCell.setBorder(Rectangle.NO_BORDER);
      dolphinStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(dolphinStatCell);

      PdfPCell konqCell = new PdfPCell(new Phrase("    Konqueror:", detailFont));
      konqCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(konqCell);

      PdfPCell konqStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getKonquerorCount()), detailFont));
      konqStatCell.setBorder(Rectangle.NO_BORDER);
      konqStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(konqStatCell);

      PdfPCell otherWKCell = new PdfPCell(new Phrase("    Other:", detailFont));
      otherWKCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(otherWKCell);

      PdfPCell otherWKStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getOtherWebKitCount()), detailFont));
      otherWKStatCell.setBorder(Rectangle.NO_BORDER);
      otherWKStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(otherWKStatCell);

      PdfPCell tridentCell = new PdfPCell(new Phrase("Trident:", detailFont));
      tridentCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(tridentCell);
      statTable.addCell(blankCell);

      PdfPCell ie6Cell = new PdfPCell(new Phrase("    IE6:", detailFont));
      ie6Cell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(ie6Cell);

      PdfPCell ie6StatCell = new PdfPCell(new Phrase(Integer.toString(stats.getIE6Count()), detailFont));
      ie6StatCell.setBorder(Rectangle.NO_BORDER);
      ie6StatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(ie6StatCell);

      PdfPCell ie7Cell = new PdfPCell(new Phrase("    IE7:", detailFont));
      ie7Cell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(ie7Cell);

      PdfPCell ie7StatCell = new PdfPCell(new Phrase(Integer.toString(stats.getIE7Count()), detailFont));
      ie7StatCell.setBorder(Rectangle.NO_BORDER);
      ie7StatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(ie7StatCell);

      PdfPCell ie8Cell = new PdfPCell(new Phrase("    IE8:", detailFont));
      ie8Cell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(ie8Cell);

      PdfPCell ie8StatCell = new PdfPCell(new Phrase(Integer.toString(stats.getIE8Count()), detailFont));
      ie8StatCell.setBorder(Rectangle.NO_BORDER);
      ie8StatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(ie8StatCell);

      PdfPCell ie9Cell = new PdfPCell(new Phrase("    IE9:", detailFont));
      ie9Cell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(ie9Cell);

      PdfPCell ie9StatCell = new PdfPCell(new Phrase(Integer.toString(stats.getIE9Count()), detailFont));
      ie9StatCell.setBorder(Rectangle.NO_BORDER);
      ie9StatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(ie9StatCell);

      PdfPCell ie10Cell = new PdfPCell(new Phrase("    IE10:", detailFont));
      ie10Cell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(ie10Cell);

      PdfPCell ie10StatCell = new PdfPCell(new Phrase(Integer.toString(stats.getIE10Count()), detailFont));
      ie10StatCell.setBorder(Rectangle.NO_BORDER);
      ie10StatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(ie10StatCell);

      PdfPCell ie11Cell = new PdfPCell(new Phrase("    IE11:", detailFont));
      ie11Cell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(ie11Cell);

      PdfPCell ie11StatCell = new PdfPCell(new Phrase(Integer.toString(stats.getIE11Count()), detailFont));
      ie11StatCell.setBorder(Rectangle.NO_BORDER);
      ie11StatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(ie11StatCell);

      PdfPCell edgeCell = new PdfPCell(new Phrase("    Edge:", detailFont));
      edgeCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(edgeCell);

      PdfPCell edgeStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getEdgeCount()), detailFont));
      edgeStatCell.setBorder(Rectangle.NO_BORDER);
      edgeStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(edgeStatCell);

      PdfPCell skCell = new PdfPCell(new Phrase("    SiteKiosk:", detailFont));
      skCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(skCell);

      PdfPCell skStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getSiteKioskCount()), detailFont));
      skStatCell.setBorder(Rectangle.NO_BORDER);
      skStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(skStatCell);

      PdfPCell otherTridentCell = new PdfPCell(new Phrase("    Other:", detailFont));
      otherTridentCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(otherTridentCell);

      PdfPCell otherTridentStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getOtherTridentCount()), detailFont));
      otherTridentStatCell.setBorder(Rectangle.NO_BORDER);
      otherTridentStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(otherTridentStatCell);

      PdfPCell geckoCell = new PdfPCell(new Phrase("Gecko:", detailFont));
      geckoCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(geckoCell);
      statTable.addCell(blankCell);

      PdfPCell ffCell = new PdfPCell(new Phrase("    Firefox:", detailFont));
      ffCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(ffCell);

      PdfPCell ffStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getFirefoxCount()), detailFont));
      ffStatCell.setBorder(Rectangle.NO_BORDER);
      ffStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(ffStatCell);

      PdfPCell seaCell = new PdfPCell(new Phrase("    SeaMonkey:", detailFont));
      seaCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(seaCell);

      PdfPCell seaStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getSeaMonkeyCount()), detailFont));
      seaStatCell.setBorder(Rectangle.NO_BORDER);
      seaStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(seaStatCell);

      PdfPCell iwCell = new PdfPCell(new Phrase("    Iceweasel:", detailFont));
      iwCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(iwCell);

      PdfPCell iwStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getIceweaselCount()), detailFont));
      iwStatCell.setBorder(Rectangle.NO_BORDER);
      iwStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(iwStatCell);

      PdfPCell pmCell = new PdfPCell(new Phrase("    Pale Moon:", detailFont));
      pmCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(pmCell);

      PdfPCell pmStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getPaleMoonCount()), detailFont));
      pmStatCell.setBorder(Rectangle.NO_BORDER);
      pmStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(pmStatCell);

      PdfPCell ten4Cell = new PdfPCell(new Phrase("    TenFourFox:", detailFont));
      ten4Cell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(ten4Cell);

      PdfPCell ten4StatCell = new PdfPCell(new Phrase(Integer.toString(stats.getTenFourFoxCount()), detailFont));
      ten4StatCell.setBorder(Rectangle.NO_BORDER);
      ten4StatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(ten4StatCell);

      PdfPCell wfCell = new PdfPCell(new Phrase("    Waterfox:", detailFont));
      wfCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(wfCell);

      PdfPCell wfStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getWaterfoxCount()), detailFont));
      wfStatCell.setBorder(Rectangle.NO_BORDER);
      wfStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(wfStatCell);

      PdfPCell cyberCell = new PdfPCell(new Phrase("    Cyberfox:", detailFont));
      cyberCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(cyberCell);

      PdfPCell cyberStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getCyberfoxCount()), detailFont));
      cyberStatCell.setBorder(Rectangle.NO_BORDER);
      cyberStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(cyberStatCell);

      PdfPCell idCell = new PdfPCell(new Phrase("    Icedragon:", detailFont));
      idCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(idCell);

      PdfPCell idStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getIcedragonCount()), detailFont));
      idStatCell.setBorder(Rectangle.NO_BORDER);
      idStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(idStatCell);

      PdfPCell otherGeckoCell = new PdfPCell(new Phrase("    Other:", detailFont));
      otherGeckoCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(otherGeckoCell);

      PdfPCell otherGeckoStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getOtherGeckoCount()), detailFont));
      otherGeckoStatCell.setBorder(Rectangle.NO_BORDER);
      otherGeckoStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(otherGeckoStatCell);

      PdfPCell OtherCell = new PdfPCell(new Phrase("Other:", detailFont));
      OtherCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(OtherCell);
      statTable.addCell(blankCell);

      PdfPCell otherBrowseCell = new PdfPCell(new Phrase("    Other:", detailFont));
      otherBrowseCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(otherBrowseCell);

      PdfPCell otherBrowseStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getMiscBrowserCount()), detailFont));
      otherBrowseStatCell.setBorder(Rectangle.NO_BORDER);
      otherBrowseStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(otherBrowseStatCell);

      PdfPCell unknownBrowseCell = new PdfPCell(new Phrase("    Unknown:", detailFont));
      unknownBrowseCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(unknownBrowseCell);

      PdfPCell unknownBrowseStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getUnknownBrowserCount()), detailFont));
      unknownBrowseStatCell.setBorder(Rectangle.NO_BORDER);
      unknownBrowseStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(unknownBrowseStatCell);
      
      /*
       * Devices
       */
      PdfPCell deviceCell = new PdfPCell(new Phrase("Devices", detailHeadingFont));
      deviceCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(deviceCell);
      statTable.addCell(blankCell);

      PdfPCell deskCell = new PdfPCell(new Phrase("    Desktop:", detailFont));
      deskCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(deskCell);

      PdfPCell deskStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getDesktopCount()), detailFont));
      deskStatCell.setBorder(Rectangle.NO_BORDER);
      deskStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(deskStatCell);

      PdfPCell tabCell = new PdfPCell(new Phrase("    Tablet:", detailFont));
      tabCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(tabCell);

      PdfPCell tabStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getTabletCount()), detailFont));
      tabStatCell.setBorder(Rectangle.NO_BORDER);
      tabStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(tabStatCell);

      PdfPCell phoneCell = new PdfPCell(new Phrase("    Smartphone:", detailFont));
      phoneCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(phoneCell);

      PdfPCell phoneStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getSmartPhoneCount()), detailFont));
      phoneStatCell.setBorder(Rectangle.NO_BORDER);
      phoneStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(phoneStatCell);

      PdfPCell mobiCell = new PdfPCell(new Phrase("    Mobile:", detailFont));
      mobiCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(mobiCell);

      PdfPCell mobiStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getMobileCount()), detailFont));
      mobiStatCell.setBorder(Rectangle.NO_BORDER);
      mobiStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(mobiStatCell);

      PdfPCell otherDeviceCell = new PdfPCell(new Phrase("    Other:", detailFont));
      otherDeviceCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(otherDeviceCell);

      PdfPCell otherDeviceStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getOtherDeviceCount()), detailFont));
      otherDeviceStatCell.setBorder(Rectangle.NO_BORDER);
      otherDeviceStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(otherDeviceStatCell);

      PdfPCell unknownDeviceCell = new PdfPCell(new Phrase("    Unknown:", detailFont));
      unknownDeviceCell.setBorder(Rectangle.NO_BORDER);
      statTable.addCell(unknownDeviceCell);
 
      PdfPCell unknownDeviceStatCell = new PdfPCell(new Phrase(Integer.toString(stats.getUnknownDeviceCount()), detailFont));
      unknownDeviceStatCell.setBorder(Rectangle.NO_BORDER);
      unknownDeviceStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      statTable.addCell(unknownDeviceStatCell);

      userAgentPDF.add(statTable);
      userAgentPDF.add(blankLine);
      userAgentPDF.add(new Paragraph("Some user agent strings contain a localization token.  Below is a summary of those tokens found.  The number in parathesis is the total found.  The percent is based only on those strings containing the token.", detailFont));
      userAgentPDF.add(blankLine);
      
      // Display language
      HashMap languages = stats.getSortedLanguages();
      double langTotal = 0.0;
      double langNone = 0.0;

      //create table here so that we can right-justify the second column
      PdfPTable langTable = new PdfPTable(columnWidths);
      langTable.setWidthPercentage(50f);
      //langTable.setKeepTogether(true);
      
      PdfPCell langHeadingCell = new PdfPCell(new Phrase("Language data", detailHeadingFont));
      langHeadingCell.setBorder(Rectangle.NO_BORDER);
      langTable.addCell(langHeadingCell);
      langTable.addCell(blankCell);
      
      Set langSet = languages.entrySet();
      Iterator langIt = langSet.iterator();
      
      while (langIt.hasNext()) {
        Map.Entry langEntry = (Map.Entry)langIt.next();
        String lang = langEntry.getKey().toString();
        Object langCountObj = langEntry.getValue();
        int langCountInt = Integer.parseInt(langCountObj.toString());
        double langCount = Double.parseDouble(langCountObj.toString());
        
        if (lang == "None") {
          langNone = langCount;
        }
        else if (lang == "Total") {
          langTotal = langCount;
        }
        else {
          PdfPCell langCell = new PdfPCell(new Phrase("  " + lang + " (" + langCountInt + "):", detailFont));
          langCell.setBorder(Rectangle.NO_BORDER);
          langTable.addCell(langCell);
          
          double langPercent = langCount / langTotal;

          PdfPCell langStatCell = new PdfPCell(new Phrase(percentFormat.format(langPercent), detailFont));
          langStatCell.setBorder(Rectangle.NO_BORDER);
          langStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
          langTable.addCell(langStatCell);
        }
      }

      PdfPCell langTotalCell = new PdfPCell(new Phrase("  UA strings reporting a language:", detailFont));
      langTotalCell.setBorder(Rectangle.NO_BORDER);
      langTable.addCell(langTotalCell);

      double langTotalPercent = (double)langTotal / (double)(langTotal + langNone);

      PdfPCell langTotalStatCell = new PdfPCell(new Phrase(percentFormat.format(langTotalPercent), detailFont));
      langTotalStatCell.setBorder(Rectangle.NO_BORDER);
      langTotalStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      langTable.addCell(langTotalStatCell);

      userAgentPDF.add(langTable);
      
      // Display Country
      HashMap countries = stats.getSortedCountries();
      double countryTotal = 0.0;
      double countryNone = 0.0;

      //create table here so that we can right-justify the second column
      PdfPTable countryTable = new PdfPTable(columnWidths);
      countryTable.setWidthPercentage(50f);
      //countryTable.setKeepTogether(true);
      
      PdfPCell countryHeadingCell = new PdfPCell(new Phrase("Country data", detailHeadingFont));
      countryHeadingCell.setBorder(Rectangle.NO_BORDER);
      countryTable.addCell(countryHeadingCell);
      countryTable.addCell(blankCell);
      
      Set countrySet = countries.entrySet();
      Iterator countryIt = countrySet.iterator();
      
      while (countryIt.hasNext()) {
        Map.Entry countryEntry = (Map.Entry)countryIt.next();
        String country = countryEntry.getKey().toString();
        Object countryCountObj = countryEntry.getValue();
        int countryCountInt = Integer.parseInt(countryCountObj.toString());
        double countryCount = Double.parseDouble(countryCountObj.toString());
        
        if (country == "None") {
          countryNone = countryCount;
        }
        else if (country == "Total") {
          countryTotal = countryCount;
        }
        else {
          PdfPCell countryCell = new PdfPCell(new Phrase("  " + country + " (" + countryCountInt + "):", detailFont));
          countryCell.setBorder(Rectangle.NO_BORDER);
          countryTable.addCell(countryCell);
          
          double countryPercent = countryCount / countryTotal;

          PdfPCell countryStatCell = new PdfPCell(new Phrase(percentFormat.format(countryPercent), detailFont));
          countryStatCell.setBorder(Rectangle.NO_BORDER);
          countryStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
          countryTable.addCell(countryStatCell);
        }
      }

      PdfPCell countryTotalCell = new PdfPCell(new Phrase("  UA strings reporting a country:", detailFont));
      countryTotalCell.setBorder(Rectangle.NO_BORDER);
      countryTable.addCell(countryTotalCell);

      double countryTotalPercent = (double)countryTotal / (double)(countryTotal + countryNone);

      PdfPCell countryTotalStatCell = new PdfPCell(new Phrase(percentFormat.format(countryTotalPercent), detailFont));
      countryTotalStatCell.setBorder(Rectangle.NO_BORDER);
      countryTotalStatCell.setHorizontalAlignment(Element.ALIGN_RIGHT);
      countryTable.addCell(countryTotalStatCell);

      userAgentPDF.add(countryTable);
    }
    catch (FileNotFoundException ex) {
      ex.printStackTrace();
      Logger.getLogger(UAReportBuilderFrame.class.getName()).log(Level.SEVERE, null, ex);
    } 
    catch (BadElementException ex) {
      ex.printStackTrace();
      Logger.getLogger(UAReportBuilderFrame.class.getName()).log(Level.SEVERE, null, ex);
    } 
    catch (IOException ex) {
      ex.printStackTrace();
      Logger.getLogger(UAReportBuilderFrame.class.getName()).log(Level.SEVERE, null, ex);
    }
    catch (DocumentException ex) {
      ex.printStackTrace();
      Logger.getLogger(UAReportBuilderFrame.class.getName()).log(Level.SEVERE, null, ex);
    } 
    uap.printStats();

    userAgentPDF.close();
  }
  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(UAReportBuilderFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(UAReportBuilderFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(UAReportBuilderFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(UAReportBuilderFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
        //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        new UAReportBuilderFrame().setVisible(true);
      }
    });
  }
  public class HeadersAndFooters extends PdfPageEventHelper
  {
    public void onOpenDocument(PdfWriter writer, Document document)
    {
      title = new Paragraph("User Agent Summary", titleFont);
      title.setAlignment(Element.ALIGN_CENTER);

      subTitle = new Paragraph("For Month of " + reportMonth + " " + reportYear, subtitleFont);
      subTitle.setAlignment(Element.ALIGN_CENTER);

      try
      {
        document.add(title);
        document.add(subTitle);
        document.add(blankLine);
      }
      catch(DocumentException e)
      {
        throw new ExceptionConverter(e);
      }
    }
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JMenu editMenu;
  private javax.swing.JFileChooser fileChooser;
  private javax.swing.JMenu fileMenu;
  private javax.swing.JMenuItem fileOpenMenuItem;
  private javax.swing.JMenu parseMenu;
  private javax.swing.JMenuBar uaReportBuilderMenuBar;
  // End of variables declaration//GEN-END:variables
  
}